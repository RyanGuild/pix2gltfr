{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"app.c61986b1.js","sourceRoot":"../src","sourcesContent":["import { image_to_gltf } from \"./pix2gltfr/Cargo.toml\";\n\nconsole.log(image_to_gltf);\n\nconst fileInput = document.querySelector(\"#file-input\") as HTMLInputElement;\nconst inCanvases = document.querySelector(\"#in-canvases\") as HTMLElement;\nconst outCanvases = document.querySelector(\"#out-canvases\") as HTMLElement;\nconst imageContainer = document.querySelector(\"#image-container\") as HTMLElement;\n\nconst fileEventToFileList = (event: Event): FileList => ((event.target as HTMLInputElement).files)\n\nconst dataUrlToImage = (dataUrl: string, index: number): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    if (imageContainer.contains(document.querySelector(`image-${index}`))) {\n      const img = document.querySelector(`image-${index}`) as HTMLImageElement;\n      img.id = `image-${index}`;\n      img.src = dataUrl;\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n    } else {\n      let img = document.createElement(\"img\");\n      img.id = `image-${index}`;\n      img.src = dataUrl;\n      img = imageContainer.appendChild(img);\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n    }\n  });\n}\n\nconst imageToCanvas = (image: HTMLImageElement, index: number): HTMLCanvasElement => {\n  const canvas = document.querySelector(`canvas-${index}`) as HTMLCanvasElement || document.createElement(\"canvas\");\n  inCanvases.appendChild(canvas);\n  canvas.id = `canvas-${index}`;\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = image.naturalWidth;\n  canvas.height = image.naturalHeight;\n  ctx.drawImage(image, 0, 0);\n  return canvas;\n}\n\n\n\nconst canvasToImageData = (canvas: HTMLCanvasElement): ImageData => canvas.getContext(\"2d\").getImageData(0, 0, canvas.width, canvas.height);\n\n\nconst objURLset = new Set<string>();\nlet i = 0;\naddEventListener(\"change\", async (event) => {\n  const files = fileEventToFileList(event);\n  if (files.length > 0) {\n    // cleanup old image objects\n    for (let url of objURLset.values()) {\n      URL.revokeObjectURL(url);\n      objURLset.delete(url);\n    }\n\n    // create image objects\n    const urls = Array.from(files).map(URL.createObjectURL);\n    urls.forEach(u => objURLset.add(u));\n\n    // await image dom load\n    const images = await Promise.all(urls.map(dataUrlToImage));\n    const canvases = images.map(imageToCanvas);\n    const imageDatas = canvases.map(canvasToImageData);\n    const gltf = imageDatas.map(image_to_gltf);\n\n    for (const model of gltf) {\n      const gltf_url = URL.createObjectURL(new Blob([model], { type: \"application/octet-stream\" }));\n      const dlLink = document.createElement(\"a\");\n      dlLink.innerText = `Download gltf ${i++}`;\n      dlLink.href = gltf_url;\n      dlLink.download = `pic_${i}.gltf`;\n      dlLink.click();\n      URL.revokeObjectURL(gltf_url);\n    }\n  }\n})\n"]}